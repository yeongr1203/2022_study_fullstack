<?php
    //객체 안에 함수가 있으면 method(메소드)라고 부른다. 

    //객체 안이 아니라면 function(함수)라고 부른다.
    //함수 function, 

    // 매개변수 = 변수이기 때문에 값이 변동됨.
    // 매개변수는 외부에서 들어옴.

    $result = sum(10, 11); // 호출(부름)에 쓰는 함수.

    print "썸 : $result <br>";
    print "sum : " . sum(30, 40) . "<br>"; // 이부분은 함수를 호출했다고 함. 함수를 사용.
    // 프린트하는 위치는 상관 없이, function을 먼저 읽어줌. 

    minus(35, 12);  // 리턴된걸 복사하여 바로 주기 때문에 굳이 함수호출할 필요 없이 그냥 그대로 사용가능.
                    // 기본형식은 $함수 = minus(값1, 값2)이지만, $함수 = 지우고 사용해도 괜찮음.
    minus(10, 2);

    function sum($n1, $n2)  // function 함수명(sum) (파라미터(매개변수),파라미터(매개변수)), 파라미터 작성시 소괄호 필수. 이영역을 "선언부"라고 함.
                            //만든다=호출을 당한다면 나 이렇게 동작할꺼야 라고 하는 뜻. 값을 계산하고 다시 리턴 돌려줘서 sum을 구현하면 result값이 적용됨.
    {
        return $n1 + $n2;   // return 키워드는 옵션, 넣어도 되고 안넣어도 됨. 넣지 않아도 자동으로 들어감. 이 영역을 "구현부"라고 함.
                            // return 옆에는 내가 다시 되돌려 주고 싶은 값을 쓰면 됨. $n1 + $n2
                            // 모든함수는 return이라는 키워드를 만나야 다시 돌아간다.
    } // 이부분은 함수를 정의했다고 함.
    // 합계를 복사하여 return(다시 앞으로 돌아감)됨.
    // 2차 가공이 쉽다. 2차가공이 필요할 때 사용.

    function minus($n1, $n2)
    {
        print "minus : " . ($n1 - $n2) . "<br>"; //리턴하지 않음. 2차가공이 어렵다. 보통 2차가공이 필요없으면 사용함.
    } 
    
    // 리턴이 있고, 없고!! 인자가 있고, 없고!! 4가지 방법으로 나올 수 있음.
    // 리턴이 있는 게 더 유연함.
    /*
        함수 정의 형식 > 4가지 형식중에 어떤 형식 써야할지 결정하고 그다음 함수를 정의 해야함.

        1.리턴 타입이 없고 바로 프린트하는 함수 이면서, 매개 변수가 없다
        2.리턴 타입이 없고 바로 프린트하는 함수 이면서, 매개 변수가 있다
        3.리턴 타입이 있고 이면서, 매개 변수가 없다
        4.리턴 타입이 있고, 매개 변수가 있다    
    */

?>
